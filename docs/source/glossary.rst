.. _glossary:

==================
 Glossary of Terms
==================

.. glossary::
    :sorted:
    
    version control system
        A component of software configuration management, is a system responsible for the management of changes to documents, computer programs, large web sites, and other collections of information.

    software package
        Files needed to build and run software. This can be ``python`` files, ``.bat`` scripts, etc.
    
    metadata
        Data that provides information about other data. (i.e. title, author, file type, last accessed date, etc.)
        
    @mention
        to notify a person on GitHub by using ``@`` before their username. Users in an organization on GitHub can also be a part of a team that can be mentioned.
        
    access token
        A token that is used in place of a password when performing Git operations over HTTPS with Git on the command line or the API. Also called a personal access token.    
        
    authentication code
        A code you'll supply, in addition to your GitHub password, when signing in with 2FA via the browser. This code is either generated by an application or delivered to your phone via text message. Also called a "2FA authentication code."    
        
    base branch
        The branch into which changes are combined when you merge a pull request. When you create a pull request, you can change the base branch from the repository's default branch to another branch if required.    
        
    branch restriction
        A restriction that repository admins can enable so that only certain users or teams can push or make certain changes to the branch.    
        
    checkout
        You can use git checkout on the command line to create a new branch, change your current working branch to a different branch, or even to switch to a different version of a file from a different branch with git checkout [branchname] [path to file]. The "checkout" action updates all or part of the working tree with a tree object or blob from the object database, and updates the index and HEAD if the whole working tree is pointing to a new branch.

    clone
        A clone is a copy of a repository that lives on your computer instead of on a website's server somewhere, or the act of making that copy. When you make a clone, you can edit the files in your preferred editor and use Git to keep track of your changes without having to be online. The repository you cloned is still connected to the remote version so that you can push your local changes to the remote to keep them synced when you're online.

    code owner
        A person who is designated as an owner of a portion of a repository's code. The code owner is automatically requested for review when someone opens a pull request (not in draft mode) that makes changes to code the code owner owns.

    collaborator
        A collaborator is a person with read and write access to a repository who has been invited to contribute by the repository owner.

    commit
        A commit, or "revision", is an individual change to a file (or set of files). When you make a commit to save your work, Git creates a unique ID (a.k.a. the "SHA" or "hash") that allows you to keep record of the specific changes commited along with who made them and when. Commits usually contain a commit message which is a brief description of what changes were made.

    commit author
        The user who makes the commit.

    commit ID
        Also known as SHA. A 40-character checksum hash that identifies the commit.

    commit message
        Short, descriptive text that accompanys a commit and communicates the change the commit is introducing.

    continuous integration
        Also known as CI. A process that runs automated builds and tests once a person commits a change to a configured repository on GitHub. CI is a common best practice in software development that helps detect errors.

    contributor
        A contributor is someone who does not have collaborator access to a repository but has contributed to a project and had a pull request they opened merged into the repository.

    default branch
        The base branch in your repository, against which all pull requests and code commits are automatically made, unless you specify a different branch. This branch is usually called master.

    feature branch
        A branch used to experiment with a new feature or fix an issue that is not in production. Also called a topic branch.

    fetch
        When you use git fetch, you're adding changes from the remote repository to your local working branch without committing them. Unlike git pull, fetching allows you to review changes before committing them to your local branch.

    fork
        A fork is a personal copy of another user's repository that lives on your account. Forks allow you to freely make changes to a project without affecting the original upstream repository. You can also open a pull request in the upstream repository and keep your fork synced with the latest changes since both repositories are still connected.

    issue
        Issues are suggested improvements, tasks or questions related to the repository. Issues can be created by anyone (for public repositories), and are moderated by repository collaborators. Each issue contains its own discussion thread. You can also categorize an issue with labels and assign it to someone.

    label
        A tag on an issue or pull request. Repositories come with a handful of default labels, but users can create custom labels.

    license
        A document that you can include with your project to let people know what they can and can't do with your source code.

    Markdown
        Markdown is an incredibly simple semantic file format, not too dissimilar from .doc, .rtf and .txt. Markdown makes it easy for even those without a web-publishing background to write prose (including with links, lists, bullets, etc.) and have it displayed like a website. GitHub supports Markdown and uses a particular form of Markdown called GitHub Flavored Markdown.

    master
        The default development branch. Whenever you create a Git repository, a branch named "master" is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required.

    merge
        Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another. This often happens as a "pull request" (which can be thought of as a request to merge), or via the command line. A merge can be done through a pull request via the GitHub.com web interface if there are no conflicting changes, or can always be done via the command line.

    merge conflict
        A difference that occurs between merged branches. Merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. The merge conflict must be resolved before you can merge the branches.

    milestone
        A way to track the progress on groups of issues or pull requests in a repository.

    origin
        The default upstream repository. Most projects have at least one upstream project that they track. By default, origin is used for that purpose.

    private repository
        Private repositories are only visible to the repository owner and collaborators that the owner specified.

    protected branch
        Protected branches block several features of Git on a branch that a repository administrator chooses to protect. They can't be force pushed, deleted, have changes merged without required checks passing or required reviews approved, or have files uploaded to it from the GitHub web interface. A protected branch is usually the default branch.

    public repository
        A public repository can be viewed by anyone, including people who aren't GitHub users.

    pull
        Pull refers to when you are fetching in changes and merging them. For instance, if someone has edited the remote file you're both working on, you'll want to pull in those changes to your local copy so that it's up to date. See also fetch.

    pull request
        Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository's collaborators. Like issues, pull requests each have their own discussion forum.

    pull request review
        Comments from collaborators on a pull request that approve the changes or request further changes before the pull request is merged.

    push
        To push means to send your committed changes to a remote repository on GitHub.com. For instance, if you change something locally, you can push those changes so that others may access them.

    push a branch
        When you successfully push a branch to a remote repository, you update the remote branch with changes from your local branch. When you "push a branch", Git will search for the branch's HEAD ref in the remote repository and verify that it is a direct ancestor to the branch's local HEAD ref. Once verified, Git pulls all objects (reachable from the local HEAD ref and missing from the remote repository) into the remote object database and then updates the remote HEAD ref. If the remote HEAD is not an ancestor to the local HEAD, the push fails.

    read access
        A permission level on a repository that allows the user to pull, or read, information from the repository. All public repositories give read access to all GitHub users. A synonym for pull access.

    README
        A text file containing information about the files in a repository that is typically the first file a visitor to your repository will see. A README file, along with a repository license, contribution guidelines, and a code of conduct, helps you share expectations and manage contributions to your project.

    rebase
        To reapply a series of changes from a branch to a different base, and reset the HEAD of that branch to the result.

    release
        GitHub's way of packaging and providing software to your users.

    remote
        This is the version of a repository or branch that is hosted on a server, most likely GitHub.com. Remote versions can be connected to local clones so that changes can be synced.

    remote repository
        A repository that is used to track the same project but resides somewhere else.

    repository
        A repository is the most basic element of GitHub. They're easiest to imagine as a project's folder. A repository contains all of the project files (including documentation), and stores each file's revision history. Repositories can have multiple collaborators and can be either public or private.

    security log
        A log that lists the last 50 actions or those performed within the last 90 days.

    SSH key
        SSH keys are a way to identify yourself to an online server, using an encrypted message. It's as if your computer has its own unique password to another service. GitHub uses SSH keys to securely transfer information to your computer.

    Status checks
        Status checks are external processes, such as continuous integration builds, which run for each commit you make in a repository.

    upstream
        When talking about a branch or a fork, the primary branch on the original repository is often referred to as the "upstream", since that is the main place that other changes will come in from. The branch/fork you are working on is then called the "downstream". Also called origin.

    upstream branch
        The default branch that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.<name>.remote and branch.<name>.merge. If the upstream branch of A is origin/B sometimes we say "A is tracking origin/B".

    watching notifications
        A notification about activity in a repository a user has subscribed to.

    write access
        A permission level on a repository that allows the user to push, or write, changes to the repository.








        